name: Build and Deploy

on:
  release:
    # The tag will be available at ${{ env.GITHUB_REF }}
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          # In the code below, we enable the 'dev' or 'latest' tag depending
          # on the release type.
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=dev,enable=${{ github.event.release.prerelease }}
          flavor: |
            latest=${{ !github.event.release.prerelease }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  static:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5

      - name: Install Node.js packages
        run: npm ci --also=dev

      - name: Build static files
        run: npm run build

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Install Python and GDAL
        run: conda install -y libgdal=3.3.1 -c conda-forge

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: Upload static files
        run: python manage.py collectstatic --no-input
        env:
          USE_S3_STORAGE: True
          S3_ACCESS_KEY: ${{secrets.MINIO_ACCESS_KEY}}
          S3_SECRET_KEY: ${{secrets.MINIO_SECRET_KEY}}
          S3_ENDPOINT_URL: 'https://files.gewaessercampus.de'
          S3_BUCKET_NAME: 'gcampus'
