#  Copyright (C) 2023 desklab gUG (haftungsbeschr√§nkt)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
from unittest import SkipTest

import httpx
from django.contrib.gis.geos import Point
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.urls import reverse
from django.utils.timezone import now

from gcampus.auth.models import Course
from gcampus.core.files import file_exists
from gcampus.core.models import Measurement
from gcampus.core.tests.mixins import TokenTestMixin, WaterTestMixin, LoginTestMixin
from gcampus.documents.tasks import document_cleanup
from gcampus.tasks.tests.utils import BaseMockTaskTest


class TestDocumentViews(
    LoginTestMixin, TokenTestMixin, WaterTestMixin, BaseMockTaskTest
):
    def test_course_document_forbidden(self):
        response = self.client.get(reverse("gcampusdocuments:course"))
        self.assertEqual(response.status_code, 403)

    def test_course_access_keys_document_forbidden(self):
        response = self.client.get(reverse("gcampusdocuments:accesskeys"))
        self.assertEqual(response.status_code, 403)

    def test_course_document(self):
        self.login(self.course.course_token)
        response = self.client.get(reverse("gcampusdocuments:course"))
        self.assertEqual(response.status_code, 200)

    def test_course_access_keys_document(self):
        self.login(self.course.course_token)
        response = self.client.get(reverse("gcampusdocuments:accesskeys"))
        self.assertEqual(response.status_code, 200)

    def test_measurement_document(self):
        measurement = Measurement(
            token=self.tokens[0], location=Point(0, 0), water=self.water, time=now()
        )
        measurement.save()
        # A signal might have triggered
        measurement.refresh_from_db()
        # Ensure no document has been generated yet
        self.assertFalse(bool(measurement.document))
        # A document will be generated by calling the view
        try:
            response = self.client.get(
                reverse("gcampusdocuments:measurement-detail", args=(measurement.pk,))
            )
        except httpx.HTTPStatusError as e:
            # Check if the error raised by the view is caused by a
            # Mapbox authentication error. This is the case if no Mapbox
            # token is provided for rendering the static map. In that
            # case, we can skip the test.
            if e.request.url.host == "api.mapbox.com" and e.response.status_code == 401:
                raise SkipTest("Mapbox authentication failed")
        self.assertEqual(response.status_code, 200)


class TestDocumentCleanup(TokenTestMixin, WaterTestMixin, BaseMockTaskTest):
    def test_non_removal(self):
        file = ContentFile(b"", name="test.pdf")
        course = Course(teacher_email="test@localhost", overview_document=file)
        course.save()
        file2 = ContentFile(b"", name="test2.pdf")
        measurement = Measurement(
            token=self.tokens[0],
            location=Point(0, 0),
            water=self.water,
            time=now(),
            document=file2,
        )
        measurement.save()
        document_cleanup()
        self.assertTrue(file_exists(course.overview_document))
        self.assertTrue(file_exists(measurement.document))

    def test_orphaned_file(self):
        file = ContentFile(b"", name="test.pdf")
        course = Course(teacher_email="test@localhost", overview_document=file)
        course.save()
        file_name = course.overview_document.name
        self.assertTrue(default_storage.exists(file_name))
        course.overview_document = None
        course.save()
        document_cleanup()
        self.assertFalse(default_storage.exists(file_name))

    def test_missing_file(self):
        file = ContentFile(b"", name="test.pdf")
        course = Course(teacher_email="test@localhost", overview_document=file)
        course.save()
        file_name = course.overview_document.name
        self.assertTrue(default_storage.exists(file_name))
        default_storage.delete(file_name)
        self.assertFalse(default_storage.exists(file_name))
        document_cleanup()
        course.refresh_from_db(fields=("overview_document",))
        self.assertFalse(bool(course.overview_document))
